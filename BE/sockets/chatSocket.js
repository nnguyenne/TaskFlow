
const Message = require("../models/message.model");
const Conversation = require("../models/conversation.model");

module.exports = (io) => {
  io.on("connection", (socket) => {
    const userId = socket.user._id;
    console.log("üì° User k·∫øt n·ªëi:", userId);

    // ‚úÖ User v√†o ph√≤ng chat c·ª• th·ªÉ
    socket.on("joinRoom", ({ conversationId }) => {
      socket.join(conversationId);
      console.log(`üë§ User ${userId} v√†o room ${conversationId}`);
    });
    
    socket.on("sendMessage", async ({ conversationId, message }) => {
      if (!message || !conversationId) return;

      try {
        // + l∆∞u v√†o DB
        const newMsg = await Message.create({
          conversation: conversationId,
          sender: userId,
          message
        });

        // + c·∫≠p nh·∫≠t th·ªùi gian m·ªõi nh·∫•t
        await Conversation.findByIdAndUpdate(conversationId, { updatedAt: Date.now() });

        // ‚úÖ c√°ch ch·∫Øc ch·∫Øn l·∫•y ƒë∆∞·ª£c sender ƒë·∫ßy ƒë·ªß
        const populatedMsg = await Message.findById(newMsg._id).populate("sender", "-password");

        // + g·ª≠i cho t·∫•t c·∫£ client ƒëang ·ªü trong room
        io.to(conversationId).emit("receiveMessage", populatedMsg);
      } catch (err) {
        console.error("‚ùå L·ªói g·ª≠i tin nh·∫Øn:", err.message);
      }
    });

    socket.on("disconnect", () => {
      console.log("‚ùå User ng·∫Øt k·∫øt n·ªëi:", userId);
    });
  });
};
